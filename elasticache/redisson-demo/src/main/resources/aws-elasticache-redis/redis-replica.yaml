---
# AWS Cluster Disable(对应Redis Master-Slave或Sentinel版本,只能一写多读)时的设置
# https://redisson.org/docs/integration-with-spring/#spring-boot-starter
# https://redisson.org/docs/configuration/
# https://redisson.org/docs/configuration/#replicated-mode
replicatedServersConfig:
  # Add Redis node address in host:port format. Multiple nodes could be added at once. All nodes (master and slaves) should be defined.
  nodeAddresses:
    - "rediss://master.valkey-replica.xxx.cnw1.cache.amazonaws.com.cn:6379"
    - "rediss://replica.valkey-replica.xxx.cnw1.cache.amazonaws.com.cn:6379"
  # Database index used for Redis connection
  database: 0
  # Username for Redis server authentication. Requires Redis 6.0+
  #username:
  # Password for Redis server authentication.
  password: password_xxx
  # Defines array of allowed SSL protocols.
  sslProtocols:
    - TLSv1.3
    - TLSv1.2
  # Enables TCP keepAlive for connection.
  keepAlive: true
  # PING command sending interval per connection to Redis. Defined in milliseconds. Set 0 to disable.
  pingConnectionInterval: 30000
  # Name of client connection
  clientName: ${spring.application.name}
  # Replicated nodes scan interval in milliseconds.
  scanInterval: 1000
  # Check each Redis hostname defined in configuration for IP address changes during scan process
  monitorIPChanges: true
  # Set node type used for read operation
  readMode: "MASTER"
  # Set node type used for subscription operation. Available values:
  subscriptionMode: "SLAVE"
  # If pooled connection not used for a timeout time and current connections amount bigger than minimum idle connections pool size, then it will closed and removed from pool. Value in milliseconds.
  idleConnectionTimeout: 10000
  # Timeout during connecting to any Redis server.
  connectTimeout: 10000
  # Redis server response timeout. Starts to countdown when Redis command was succesfully sent. Value in milliseconds.
  timeout: 3000
  # Error will be thrown if Redis command can't be sended to Redis server after retryAttempts. But if it sent succesfully then timeout will be started.
  retryAttempts: 3
  # Time interval after which another one attempt to send Redis command will be executed. Value in milliseconds.
  retryInterval: 1500
  # Interval of Redis Slave reconnection attempt when it was excluded from internal list of available servers. On each timeout event Redisson tries to connect to disconnected Redis server. Value in milliseconds.
  failedSlaveReconnectionInterval: 3000
  # Defines failed Redis Slave node detector object which implements failed node detection logic
  failedSlaveNodeDetector: !<org.redisson.client.FailedConnectionDetector> { }
  # Сonnection load balancer for multiple Redis servers
  loadBalancer: !<org.redisson.connection.balancer.RoundRobinLoadBalancer> { }
  # Subscriptions per subscribe connection limit.
  subscriptionsPerConnection: 5
  # Minimum idle connection pool size for subscription (pub/sub) channels
  subscriptionConnectionMinimumIdleSize: 1
  # Maximum connection pool size for subscription (pub/sub) channels
  subscriptionConnectionPoolSize: 50
  # Redis 'slave' node minimum idle connection amount for each slave node
  slaveConnectionMinimumIdleSize: 2
  # Redis 'slave' node maximum connection pool size for each slave node
  slaveConnectionPoolSize: 64
  # Minimum idle connections amount per Redis master node.
  masterConnectionMinimumIdleSize: 24
  # Redis 'master' node maximum connection pool size
  masterConnectionPoolSize: 64
# Threads are used to execute listeners logic of RTopic object
threads: 16
# Threads amount shared between all internal redis clients used by Redisson
nettyThreads: 32
# Redis data codec. Used during read and write Redis data
codec: !<org.redisson.codec.Kryo5Codec> { }
transportMode: "NIO"
# RLock object watchdog timeout in milliseconds. This parameter is only used if RLock object acquired without leaseTimeout parameter.
lockWatchdogTimeout: 30000
# Defines whether to check synchronized slaves amount with actual slaves amount after lock acquisition.
checkLockSyncedSlaves: true
# Defines slaves synchronization timeout in milliseconds applied to each operation of RLock, RSemaphore, RPermitExpirableSemaphore objects.
slavesSyncTimeout: 1000
# Reliable Topic watchdog timeout in milliseconds.
reliableTopicWatchdogTimeout: 600000